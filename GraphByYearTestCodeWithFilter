<!DOCTYPE html>
<html lang="en">
    <style type="text/css">

    html{
      font-family: Helvetica, sans-serif;
      font-size: 12px;
    }

    .EventList{
      display: inline;
      float: left;
    }

    h2{
      font-family: Helvetica, sans-serif;
      font-size: 14px;
      margin-bottom: 0px;
    }

    ul{
      list-style-type: none;
      padding-left: 10px;
    }


    svg{
      padding-left: 30px;
      padding-top: 10px;
    }

      .yaxis path,

      .yaxis line {
          fill: none;
          stroke:  #8b8989;
          shape-rendering: crispEdges;
      }

      .yaxis text {
          fill:  #8b8989;
          font-family: sans-serif;
          font-size: 10px;
      }

      .xaxis path,

      .xaxis line {
          fill: none;
          stroke: #8b8989;
          shape-rendering: crispEdges;
        }

      .xaxis text {
          fill:  #8b8989;
          font-family: sans-serif;
          font-size: 10px;
      }        

      .gold {
          fill: rgba(201,137,16,0.7);
      }

      .silver {
          fill: rgba(168,168,168, 0.6);
      }

      .bronze {
          fill: rgba(150,90,56, 0.6);
      }

      .altitudeLine{
          stroke: rgb(205,201,201);
          stroke-opacity: 0.2;
          stroke-width: 1px;
      }

      label {  
          display: inline-block;  
          cursor: pointer;  
          position: relative;  
          padding-left: 25px;  
          margin-right: 15px;  
          font-size: 13px;  
      }  


</style>

<head>
    <meta charset="utf-8">

<script src="http://d3js.org/d3.v3.min.js" charset="utf-8"></script>

</head>

<body>

 <!--Here we are adding some radio buttons-->

  <div class="EventList">
    <h2>Events</h2>
          <ul id="Events">
            <li><label><input checked="checked" type="radio" name="radio" value="AllEvents">All Events</label></li>
            <li><label><input type="radio" name="radio" value="FiveHundredMen">500m Men</label></li>
            <li><label><input type="radio" name="radio" value="FiveHundredWomen">500m Women</label></li>
            <li><label><input type="radio" name="radio" value="OneThousandMen">1000m Men</label></li>
            <li><label><input type="radio" name="radio" value="OneThousandWomen">1000m Women</label></li>
            <li><label><input type="radio" name="radio" value="FifteenHundredMen">1500m Men</label></li>
            <li><label><input type="radio" name="radio" value="FifteenHundredWomen">1500m Women</label></li>
            <li><label><input type="radio" name="radio" value="ThreeThousandWomen">3000m Women</label></li>
            <li><label><input type="radio" name="radio" value="FiveThousandMen">5000m Men</label></li>
            <li><label><input type="radio" name="radio" value="FiveThousandWomen">5000m Women</label></li>
            <li><label><input type="radio" name="radio" value="TenThousandMen">10000m Men</label></li>
          </ul>

   <!--Splitting the radio buttons into two columns-->

    <h2>Short Track Events</h2>
            <ul id="ShortTrack">
              <li><label><input type="radio" name="radio" value="ShortFiveHundredMen">500m Short Track Men</label></li>
              <li><label><input type="radio" name="radio" value="ShortFiveHundredWomen">500m Short Track Women</label></li>
              <li><label><input type="radio" name="radio" value="ShortOneThousandMen">1000m Short Track Men</label></li>
              <li><label><input type="radio" name="radio" value="ShortOneThousandWomen">1000m Short Track Women</label></li>
            </ul>
  </div>


<script type="text/javascript">

//Margin Conventions//

var margin = {top: 20, right: 20, bottom: 20, left: 20};
     width = 960 - margin.left - margin.right,
     height = 600 - margin.top - margin.bottom;

//defining a variable to make it easier to select within the html//

var html = d3.select("body");


//loading up the csv//

d3.csv("datacleansort.csv", function(error, data){

        //create a variable for all events and do a data join so that the viewer can see everything on load//

          var AllEvents = d3.selectAll("input[value=AllEvents]")
              .on("click", function() {
                  var circles = svg.selectAll("circle")
                    .data(data)

                    yScale.domain([d3.min(data, function(d) { return d.totalseconds}), d3.max(data, function(d) { return d.totalseconds})]);

                  circles.enter()
                    .append("circle")
                    .classed("bronze", function(d) { return d.Medal == "BRONZE"; })
                    .classed("silver", function(d) { return d.Medal == "SILVER"; })
                    .classed("gold", function(d) { return d.Medal == "GOLD"; })
                    .append("text");

                  svg.select(".yaxis")
                    .transition()
                    .duration(1000).ease("exp-in-out")
                    .call(yAxis);

                  circles.exit()
                    .remove();

                  circles
                  //transition it vertically down off of the graph
                    .transition()
                    .duration(450)
                    .style("opacity", 0)
                    .attr('cy', height)
                    .ease("cubic-in-out")
                  //move the circles to the correct x value, so we can transition them vertically up
                    .transition()
                    .duration(100)
                    .style("opacity", 0)
                    .attr('cx', function(d){ return xScale(d.Year); })
                  //transition vertically to the correct place on the scale
                    .transition()
                    .duration(450)
                    .style("opacity", 1)
                    .ease("cubic-in-out")
                    .attr('cy', function(d){ return yScale(d.totalseconds); })
                    .attr('r', "5")
                    .attr('stroke', '#575757');
            });

          //create a variable that will trigger when the radio buttons are clicked, we do this for every button

          var FiveHundredMen = d3.selectAll("input[value=FiveHundredMen]")
              .on("click", function() {
              draw("500m Men")
            });

          var FiveHundredWomen = d3.selectAll("input[value=FiveHundredWomen]")
              .on("click", function() {
              draw("500m Women")
            });

          var OneThousandMen = d3.selectAll("input[value=OneThousandMen]")
              .on("click", function() {
              draw("1000m Men")
            });

          var OneThousandWomen = d3.selectAll("input[value=OneThousandWomen]")
              .on("click", function() {
              draw("1000m Women")
            });

          var FifteenHundredMen = d3.selectAll("input[value=FifteenHundredMen]")
              .on("click", function() {
              draw("1500m Men")
            });

          var FifteenHundredWomen = d3.selectAll("input[value=FifteenHundredWomen]")
            .on("click", function() {
            draw("1500m Women")
          });

          var ThreeThousandWomen = d3.selectAll("input[value=ThreeThousandWomen]")
            .on("click", function() {
            draw("3000m Women")
          });

          var FiveThousandMen = d3.selectAll("input[value=FiveThousandMen]")
            .on("click", function() {
            draw("5000m Men")
          });

          var FiveThousandWomen = d3.selectAll("input[value=FiveThousandWomen]")
            .on("click", function() {
            draw("5000m Women")
          });

          var TenThousandMen = d3.selectAll("input[value=TenThousandMen]")
            .on("click", function() {
            draw("10000m Men")
          });

          var ShortFiveHundredMen = d3.selectAll("input[value=ShortFiveHundredMen]")
              .on("click", function() {
              draw("500m Short Track Men")
            });

          var ShortFiveHundredWomen = d3.selectAll("input[value=ShortFiveHundredWomen]")
              .on("click", function() {
              draw("500m Short Track Women")
            });


          var ShortOneThousandMen = d3.selectAll("input[value=ShortOneThousandMen]")
              .on("click", function() {
              draw("1000m Short Track Men")
            });

          var ShortOneThousandWomen = d3.selectAll("input[value=ShortOneThousandWomen]")
              .on("click", function() {
              draw("1000m Short Track Women")
            });


//make the svg "canvas"//
  var svg = html.append("svg")
      .attr("width", width + margin.left + margin.right)
      .attr("height", height + margin.top + margin.bottom)
      .append("g")
      .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

//make values numeric so we can do math//
  data.forEach(function(d) { 
    d.Year = +d.Year,
    d.Altitude = +d.Altitude,
    d.totalseconds = +d.totalseconds
  });

//x and y scales--not the yScale has only range at this point. We'll define the domain down in the function because it changes.//
//Note that xScale has an ordinal scale with a defined domain. This is because the olympic event years are not evenly spaced across time, so if you were to scale it linearly, it would look strange and uneven.//
  //var xScale = d3.scale.ordinal()
      //.domain([1924, 1928, 1932, 1936, 1948, 1952, 1956, 1960, 1964, 1968, 1972, 1976, 1980, 1984, 1988, 1992, 1994, 1998, 2002, 2006, 2010, 2014])
      //rangePoints takes an interval, the number after the brackets is the padding//
      //.rangePoints([0, width], 2);

      //create a variable that gives us data after 1960
  var dataAfter1960 = data.filter(function(d, i) { return d.Year <1968 });

  var xScale = d3.scale.linear()
      .domain([d3.min(dataAfter1960, function(d) { return d.Altitude}), d3.max(dataAfter1960, function(d) { return d.Altitude})])
      .range([0, width]);

  var yScale = d3.scale.linear()
      .range([height, 0]);

//let's nest data so we can sort it better//

  var dataByEvent = d3.nest()
      .key(function(d) { return d.Event; })
      .map(data);

//and this one is by Event and Year so we can create a data box--not sure yet if that's going to work//
  var dataByEventAndYear = d3.nest()
      .key(function(d) { return d.Event; })
      .key(function(d) { return d.Year; })
      .map(data);

  var xAxis = d3.svg.axis()
    .scale(xScale)
    .tickFormat(d3.format("d"))
    .tickValues([1924, 1928, 1932, 1936, 1948, 1952, 1956, 1960, 1964, 1968, 1972, 1976, 1980, 1984, 1988, 1992, 1994, 1998, 2002, 2006, 2010, 2014]);

  svg.append("g")
      .attr("class", "xaxis")  //Assign "xaxis" class
      .call(xAxis)
      .attr("transform", "translate(0," + (height) + ")");

  var yAxis = d3.svg.axis()
      .scale(yScale)
      .orient("left");

  svg.append("g")
      .attr("class", "yaxis")
      .call(yAxis);

  //draw the altitudes

  //define a y domain variable so we can graph the altitudes at a static height without messing anything else up
  var altitudeYDomain = yScale.domain([0, 2000])

  //data join for the altitude lines
  var lines = svg.selectAll("lines")
      .data(data)
      .enter()
      .append("line")
      .attr("x1", function(d){ return xScale(d.Altitude); })
      .attr("y1", function(d){ return height})
      .attr("x2", function(d){ return xScale(d.Altitude)})
      .attr("y2", function(d){ return altitudeYDomain(d.Altitude)})
      .attr("class", "altitudeLine");

//this is the function that feeds in the event data (triggered by the radio buttons) and draws a graph

  function draw(currentEvent) {
    console.log(currentEvent);

    var currentEventData = dataByEvent[currentEvent];

    yScale.domain([d3.min(currentEventData, function(d) { return d.totalseconds}), d3.max(currentEventData, function(d) { return d.totalseconds})]);

    var circles = svg.selectAll("circle")
        .data(currentEventData);
    
    //okay, so these three lines allow the class to update when the data is loded--not entirely sure why, but they're important so that old classes get overrided when new data is brought in//
    circles
        .classed("bronze", function(d) { return d.Medal == "BRONZE"; })
        .classed("silver", function(d) { return d.Medal == "SILVER"; })
        .classed("gold", function(d) { return d.Medal == "GOLD"; });

    circles.enter()
        .append("circle")
        .classed("bronze", function(d) { return d.Medal == "BRONZE"; })
        .classed("silver", function(d) { return d.Medal == "SILVER"; })
        .classed("gold", function(d) { return d.Medal == "GOLD"; });


    svg.select(".yaxis")
        .transition()
        .duration(1000)
        .ease("exp-in-out")
        .call(yAxis);

    circles.exit()
        .remove();
        
    circles
      //transition it vertically down off of the graph
        .transition()
        .duration(450)
        .style("opacity", 0)
        .attr('cy', height)
        .ease("cubic-in-out")
      //move the circles to the correct x value, so we can transition them vertically up
        .transition()
        .duration(100)
        .style("opacity", 0)
        .attr('cx', function(d){ return xScale(d.Altitude); })
      //transition vertically to the correct place on the scale
        .transition()
        .duration(450)
        .style("opacity", 1)
        .ease("cubic-in-out")
        .attr('cy', function(d){ return yScale(d.totalseconds); })
        .attr('r', "5")
        .attr('stroke', '#575757');


  }





});

</script>
</body>
